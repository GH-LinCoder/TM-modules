/**
 * A central registry that maps function names to their metadata and
 * a reference to the actual function.
 */
export const functionRegistry = {
  // Function to insert a new task header
  insertTask: {
    // Metadata for the permissions system
    metadata: {
      tables: ['task_headers'],
      columns: ['name', 'description'],
      type: 'INSERT',
      // This could also hold other data like required user roles or permissions
    },
    // The actual function that interacts with the database
    handler: async (supabase, taskName, taskDescription) => {
      const { data, error } = await supabase
        .from('task_headers')
        .insert([{
          name: taskName,
          description: taskDescription
        }])
        .select();
      if (error) throw error;
      return data[0];
    }
  },

  // Function to read a task and all its steps
  readTaskWithSteps: {
    metadata: {
      tables: ['task_headers', 'task_steps'],
      columns: ['id', 'name', 'description'],
      type: 'SELECT',
    },
    handler: async (supabase, taskId) => {
      const { data, error } = await supabase
        .from('task_headers')
        .select('id, name, description, task_steps(*)')
        .eq('id', taskId);
      if (error) throw error;
      return data[0];
    }
  },
};
